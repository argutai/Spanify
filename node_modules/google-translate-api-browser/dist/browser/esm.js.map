{"version":3,"file":"esm.js","mappings":"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","sources":["webpack://google-translate-api-browser/webpack/bootstrap","webpack://google-translate-api-browser/webpack/runtime/define property getters","webpack://google-translate-api-browser/webpack/runtime/hasOwnProperty shorthand","webpack://google-translate-api-browser/./src/defaultTranslateOptions.ts","webpack://google-translate-api-browser/./src/generateRequestUrl.ts","webpack://google-translate-api-browser/./src/languages.ts","webpack://google-translate-api-browser/./src/isLanguageSupported.ts","webpack://google-translate-api-browser/./src/normaliseResponse.ts","webpack://google-translate-api-browser/./src/createRequestBody.ts","webpack://google-translate-api-browser/./src/translate.browser.ts","webpack://google-translate-api-browser/./src/index.browser.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { TranslateOptions } from \"./types/TranslateOptions\";\n\nexport const defaultTranslateOptions: TranslateOptions = {\n  from: \"auto\",\n  to: \"en\",\n  hl: \"en\", // Host language\n  tld: \"com\",\n  rpcids: \"MkEWBc\",\n};\n","import { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { GenerateRequestUrlOptions } from \"./types/GenerateRequestUrlOptions\";\n\nfunction validateTLD(tld: string): boolean {\n  return Boolean(tld.match(/^[a-zA-Z]{2,63}$/));\n}\n\nexport function generateRequestUrl({\n  rpcids = defaultTranslateOptions.rpcids,\n  hl = defaultTranslateOptions.hl,\n  tld = defaultTranslateOptions.tld\n}: GenerateRequestUrlOptions = {}): string {\n  if (!validateTLD(tld)) {\n    throw new Error(\"Invalid TLD: Must be 2-63 letters only\");\n  }\n\n  const searchParams = new URLSearchParams({\n    rpcids: rpcids,\n    \"source-path\": \"/\",\n    hl: hl,\n    \"soc-app\": \"1\",\n    \"soc-platform\": \"1\",\n    \"soc-device\": \"1\",\n    rt: \"c\"\n  });\n\n  return `https://translate.google.${tld}/_/TranslateWebserverUi/data/batchexecute?${searchParams}`;\n}\n","const langs = {\n  auto: \"Automatic\",\n  af: \"Afrikaans\",\n  sq: \"Albanian\",\n  am: \"Amharic\",\n  ar: \"Arabic\",\n  hy: \"Armenian\",\n  az: \"Azerbaijani\",\n  eu: \"Basque\",\n  be: \"Belarusian\",\n  bn: \"Bengali\",\n  bs: \"Bosnian\",\n  bg: \"Bulgarian\",\n  ca: \"Catalan\",\n  ceb: \"Cebuano\",\n  ny: \"Chichewa\",\n  zh: \"Chinese Simplified\",\n  \"zh-cn\": \"Chinese Simplified\",\n  \"zh-tw\": \"Chinese Traditional\",\n  co: \"Corsican\",\n  hr: \"Croatian\",\n  cs: \"Czech\",\n  da: \"Danish\",\n  nl: \"Dutch\",\n  en: \"English\",\n  eo: \"Esperanto\",\n  et: \"Estonian\",\n  tl: \"Filipino\",\n  fi: \"Finnish\",\n  fr: \"French\",\n  fy: \"Frisian\",\n  gl: \"Galician\",\n  ka: \"Georgian\",\n  de: \"German\",\n  el: \"Greek\",\n  gu: \"Gujarati\",\n  ht: \"Haitian Creole\",\n  ha: \"Hausa\",\n  haw: \"Hawaiian\",\n  he: \"Hebrew\",\n  iw: \"Hebrew\",\n  hi: \"Hindi\",\n  hmn: \"Hmong\",\n  hu: \"Hungarian\",\n  is: \"Icelandic\",\n  ig: \"Igbo\",\n  id: \"Indonesian\",\n  ga: \"Irish\",\n  it: \"Italian\",\n  ja: \"Japanese\",\n  jw: \"Javanese\",\n  kn: \"Kannada\",\n  kk: \"Kazakh\",\n  km: \"Khmer\",\n  rw: \"Kinyarwanda\",\n  ko: \"Korean\",\n  ku: \"Kurdish (Kurmanji)\",\n  ky: \"Kyrgyz\",\n  lo: \"Lao\",\n  la: \"Latin\",\n  lv: \"Latvian\",\n  lt: \"Lithuanian\",\n  lb: \"Luxembourgish\",\n  mk: \"Macedonian\",\n  mg: \"Malagasy\",\n  ms: \"Malay\",\n  ml: \"Malayalam\",\n  mt: \"Maltese\",\n  mi: \"Maori\",\n  mr: \"Marathi\",\n  mn: \"Mongolian\",\n  my: \"Myanmar (Burmese)\",\n  ne: \"Nepali\",\n  no: \"Norwegian\",\n  or: \"Odia (Oriya)\",\n  ps: \"Pashto\",\n  fa: \"Persian\",\n  pl: \"Polish\",\n  pt: \"Portuguese\",\n  pa: \"Punjabi\",\n  ro: \"Romanian\",\n  ru: \"Russian\",\n  sm: \"Samoan\",\n  gd: \"Scots Gaelic\",\n  sr: \"Serbian\",\n  st: \"Sesotho\",\n  sn: \"Shona\",\n  sd: \"Sindhi\",\n  si: \"Sinhala\",\n  sk: \"Slovak\",\n  sl: \"Slovenian\",\n  so: \"Somali\",\n  es: \"Spanish\",\n  su: \"Sundanese\",\n  sw: \"Swahili\",\n  sv: \"Swedish\",\n  tg: \"Tajik\",\n  ta: \"Tamil\",\n  tt: \"Tatar\",\n  te: \"Telugu\",\n  th: \"Thai\",\n  tr: \"Turkish\",\n  tk: \"Turkmen\",\n  uk: \"Ukrainian\",\n  ur: \"Urdu\",\n  ug: \"Uyghur\",\n  uz: \"Uzbek\",\n  vi: \"Vietnamese\",\n  cy: \"Welsh\",\n  xh: \"Xhosa\",\n  yi: \"Yiddish\",\n  yo: \"Yoruba\",\n  zu: \"Zulu\",\n} as const;\n\nexport default langs;\n","import langs from \"./languages\";\nimport { LangKey } from \"./types/LangKey\";\n\nexport const isLanguageSupported = (desiredLang: LangKey): boolean => {\n  return Boolean(langs[desiredLang]);\n};\n","import { TranslationResult } from \"./types/TranslationResult\";\n\nexport function normaliseResponse(rawBody: string, raw = false): TranslationResult {\n  const content = rawBody.match(/\"\\[.*]\"/);\n\n  let data: any | null = null;\n\n  if (content) {\n    let valuableContent = content[0];\n\n    data = JSON.parse(JSON.parse(valuableContent));\n  }\n\n  if (!data) {\n    throw new Error(\"Data is either empty or corrupted\");\n  }\n\n  const translatedPhrases: [string][] = data[1][0][0][5];\n  const text = translatedPhrases.reduce<string>((fullText, textBlock) => {\n      return fullText ? `${fullText} ${textBlock[0]}` : textBlock[0];\n  }, \"\");\n\n  const result: TranslationResult = {\n    text,\n    pronunciation: data[1][0][0][1],\n    from: {\n      language: {\n        didYouMean: Boolean(data[0][1]),\n        iso: data[2],\n      },\n      text: {\n        autoCorrected: Boolean(data[1][0][0][3]),\n        value: Boolean(data[0][1]) ? data[0][1][0][4] : data[0][6][0],\n        didYouMean: Boolean(data[0][1]),\n      },\n    },\n  };\n\n  if (raw) {\n    result.raw = rawBody;\n  }\n\n  return result;\n}\n","import { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { CreateRequestBodyOptions } from \"./types/CreateRequestBodyOptions\";\n\nfunction escapeQuote(string: string): string {\n  return string.replace(/[\"]/g, \"\\\\\\\\\\\\$&\");  // $& means the whole matched string\n}\n\nexport function createRequestBody(\n  text: string,\n  { rpcids = defaultTranslateOptions.rpcids, from = defaultTranslateOptions.from, to = defaultTranslateOptions.to }: CreateRequestBodyOptions = {},\n): string {\n  const encodedData = encodeURIComponent(`[[[\"${rpcids}\",\"[[\\\\\"${escapeQuote(text)}\\\\\",\\\\\"${from}\\\\\",\\\\\"${to}\\\\\",1],[]]\",null,\"generic\"]]]`);\n\n  return `f.req=${encodedData}&`;\n}\n","import { createRequestBody } from \"./createRequestBody\";\nimport { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { generateRequestUrl } from \"./generateRequestUrl\";\nimport { normaliseResponse } from \"./normaliseResponse\";\nimport { BrowserTranslateOptions } from \"./types/BrowserTranslateOptions\";\nimport { TranslationResult } from \"./types/TranslationResult\";\n\nexport async function translate(text: string, options: BrowserTranslateOptions = {}): Promise<TranslationResult> {\n  const translateOptions: BrowserTranslateOptions = { raw: false, corsUrl: \"\", ...defaultTranslateOptions, ...options };\n\n  const body = createRequestBody(text, translateOptions);\n  const url = generateRequestUrl(translateOptions);\n\n  const response = await fetch(`${options.corsUrl}${url}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      ...translateOptions.headers,\n    },\n    body\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Request failed\");\n  }\n\n  return normaliseResponse(await response.text(), translateOptions.raw);\n}\n","import { generateRequestUrl } from \"./generateRequestUrl\";\nimport { isLanguageSupported } from \"./isLanguageSupported\";\nimport { normaliseResponse } from \"./normaliseResponse\";\nimport { translate } from \"./translate.browser\";\nimport { createRequestBody } from \"./createRequestBody\";\n\nexport { isLanguageSupported, translate, normaliseResponse, generateRequestUrl, createRequestBody };\n\nexport default translate;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","defaultTranslateOptions","from","to","hl","tld","rpcids","generateRequestUrl","Boolean","match","validateTLD","Error","searchParams","URLSearchParams","rt","auto","af","sq","am","ar","hy","az","eu","be","bn","bs","bg","ca","ceb","ny","zh","co","hr","cs","da","nl","en","eo","et","tl","fi","fr","fy","gl","ka","de","el","gu","ht","ha","haw","he","iw","hi","hmn","hu","is","ig","id","ga","it","ja","jw","kn","kk","km","rw","ko","ku","ky","lo","la","lv","lt","lb","mk","mg","ms","ml","mt","mi","mr","mn","my","ne","no","or","ps","fa","pl","pt","pa","ro","ru","sm","gd","sr","st","sn","sd","si","sk","sl","so","es","su","sw","sv","tg","ta","tt","te","th","tr","tk","uk","ur","ug","uz","vi","cy","xh","yi","yo","zu","isLanguageSupported","desiredLang","normaliseResponse","rawBody","raw","content","data","valuableContent","JSON","parse","result","text","reduce","fullText","textBlock","pronunciation","language","didYouMean","iso","autoCorrected","value","createRequestBody","string","encodedData","encodeURIComponent","replace","translate","options","translateOptions","corsUrl","body","url","fetch","method","headers","response","ok"],"sourceRoot":""}